;(function() {

  // Инициализурем элементы, клик по которым прячет целевой элемент.
  var $closeTriggers = $('[data-hide]')
  $closeTriggers.on("click", function() {
    var targetSelector = $(this).attr("data-hide")
    var $target = $(targetSelector)
    $target.hide()
  })


  class Alert {

    constructor(opts) {
      // A string to insert inside <h5 class="modal-title"> ... </h5>
      var title = opts.title

      // A string to insert inside <div class="modal-body"> ... </div>
      var body = opts.body

      if (title === undefined || body === undefined) {
        throw "You need to pass the 'title' and 'body' options."
      }

      // A string to insert inside <div class="modal-footer"> ... </div>
      var footer = opts.footer || ''

      // Extra CSS classes (separated by whitespace) that should be added to
      // the alert modal.
      var cssClasses = opts.cssClasses || ''

      // Bootsrap modal options:
      // https://getbootstrap.com/docs/4.0/components/modal/#options
      var bsModalOpts = opts.bsModalOpts || {}
      bsModalOpts.show = false

      var alertHtml = `
        <div class="alert-modal modal ${cssClasses}" tabindex="-1" role="dialog">
          <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content alert">
              <div class="modal-header">
                <h5 class="modal-title">${title}</h5>
                <button type="button" class="close close-btn" data-dismiss="modal">
                  <span class="close-icon" aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body">${body}</div>
      `
      if (footer) {
        alertHtml += `<div class="modal-footer">${footer}</div>`
      }
      alertHtml += `
            </div>
          </div>
        </div>
      `

      var $alert = $(alertHtml)
      $alert.prependTo('body')
      $alert.modal(bsModalOpts)
      this.$alert = $alert

      var $closeElems = $alert.find('.close')
      $closeElems.on("click", () => this.hide())
    }

    toggle() {
      this.$alert.modal('toggle')
    }

    show() {
      this.$alert.modal('show')
    }

    hide() {
      this.$alert.modal('hide')
    }

    destroy() {
      this.$alert.modal('dispose')
    }

    // Manually readjust the modal's position if the height of a modal changes
    // while it is open (i.e. in case a scrollbar appears).
    readjust() {
      this.$alert.modal('handleUpdate')
    }

    get isDisplayed() {
      return !this.$alert.is(':hidden')
    }

  }  // END Alert


  class SuccessAlert extends Alert {

    constructor(opts) {
      opts.cssClasses = opts.cssClasses || ''
      opts.cssClasses += ' success'
      super(opts)
    }
  }

  class FailureAlert extends Alert {

    constructor(opts) {
      opts.cssClasses = opts.cssClasses || ''
      opts.cssClasses += ' danger'
      super(opts)
    }
  }


  function handleCommonAjaxErrors(jqXHR) {

    // NETWORK ERRORS (connection refused, access denied due to CORS, etc.)
    //

    if (jqXHR.readyState == 0) {
      var alert = new FailureAlert({
        title: "Сетевая ошибка!",
        body:  "Не удалось подключиться к серверу. " +
                "Пожалуйста, проверьте ваше сетевое подключение и попробуйте позже.",
      })
      alert.show()
      return
    }

    // TOTALLY UNEXPECTED WEIRD ERRORS
    //

    if (jqXHR.readyState < 4) {
      var alert = new FailureAlert({
        title: "Неизвестная ошибка!",
        body:  "Похоже произошло что-то странное. " +
                "Перезагрузите страницу и попробуйте еще раз."

      })
      alert.show()
      return
    }

    // SERVER-SIDE ERRORS
    //

    if (jqXHR.status == 500) {
      var errorTitle = 'Ошибка 500!'
      var errorBody = `
        При отправке AJAX-запроса произошла ошибка на стороне сервера.
        Свяжитесь с администраторами сайта.
      `
      var alert = new FailureAlert({
        title: errorTitle,
        body:  errorBody,
      })
      alert.show()
      return
    }

  }  // END handleCommonAjaxErrors


  function handleFormAjaxErrors(jqXHR, form) {
    var formGroupSelector = '.form-group'
    var inputErrorsCls = 'field-errors'
    var validInputCls = 'valid'
    var invalidInputCls = 'invalid'

    var $form = $(form)

    // Очищаем старые ошибки
    var $inputErrors = $form.find('.' + inputErrorsCls)
    $inputErrors.remove()

    // Отображаем ошибки рядом с соответствующими полями

    function displayInputErrors($input, inputErrors) {
      var inputErrorsHtml = `<ul class="${inputErrorsCls}">`
      for (var i = 0; i < inputErrors.length; i++ ) {
        var error = inputErrors[i]
        inputErrorsHtml += `<li>${error}</li>`
      }
      inputErrorsHtml += '</ul>'

      // Apend field errors to DOM
      const $formGroup = $input.parents(formGroupSelector)
      $formGroup.after(inputErrorsHtml)

      // Apply validation classes
      $input.removeClass(validInputCls)
      $input.addClass(invalidInputCls)
    }

    const formErrors = jqXHR.responseJSON
    for (var inputName in formErrors) {
      var $input = $form.find(`[name="${inputName}"]`)

      var inputErrors = formErrors[inputName]
      displayInputErrors($input, inputErrors)
    }

  }


  window.handleCommonAjaxErrors = handleCommonAjaxErrors
  window.handleFormAjaxErrors = handleFormAjaxErrors
})()